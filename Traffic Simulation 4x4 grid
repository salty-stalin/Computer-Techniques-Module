# -*- coding: utf-8 -*-
"""
Created on Sat Feb  1 18:44:37 2020

@author: User
"""
from math import fabs
import random
import numpy as np
import time
import matplotlib.pyplot as plt
Vmax=5
length_of_road=100
number_of_cars=20
v=np.random.rand(number_of_cars) #generate random velocities
v2=np.round(v*Vmax,decimals=0)

"""
#DRIVING RIGHT START POSITIONS
x_positions=random.sample(range(30,int(length_of_road)), number_of_cars)
x_positions=np.negative(x_positions)
y_positions=np.zeros(number_of_cars)
y_positions.fill(50)
"""


#DRIVING LEFT START POSTIONS
x_positions=random.sample(range(30,int(length_of_road)), number_of_cars)
y_positions=np.zeros(number_of_cars)
y_positions.fill(98)



"""
#DRIVING UP START POSITIONS
y_positions=random.sample(range(int(length_of_road*0.5)-3), number_of_cars)
x_positions=np.zeros(number_of_cars)
"""


"""
#DRIVING DOWN START POSITIONS
y_positions=random.sample(range(52,int(length_of_road)), number_of_cars)
x_positions=np.zeros(number_of_cars)

"""

car1=np.vstack((x_positions,y_positions))
y_grid1=np.empty(length_of_road)
x_grid1=np.empty(length_of_road)
car1=np.vstack((car1,v2))
lane=np.zeros(number_of_cars)
lane.fill(3)
car1=np.vstack((car1,lane))
direction=np.zeros(number_of_cars)
direction.fill(2)
car1=np.vstack((car1,direction))

print(car1)
time.sleep(3)

data=np.transpose(car1)


for i in y_positions:
    bn=int(i)

    y_grid1[bn]=1
for i in x_positions:
    bn=int(i)

    x_grid1[bn]=1

with open(r"C:\Users\User\Desktop\Traffic Pictures\fulldata2.txt", "w") as f:
    np.savetxt(f, data)

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(h):


    graph_data = open(r"C:\Users\User\Desktop\Traffic Pictures\fulldata2.txt",'r').read()
    lines = graph_data.split('\n')
    xs = []
    ys = []
    for line in lines:
        if len(line) > 1:
            x, y ,x_vel,y_vel,direc = line.split(' ')
            xs.append(float(x))
            ys.append(float(y))
    ax1.clear()
    plt.ylim(0,length_of_road)
    plt.xlim(-length_of_road,length_of_road)
    plt.title("Time"+str(h))
    #ax1.set_yticks(np.arange(0,length_of_road,1))
    #ax1.set_xticks(np.arange(0,length_of_road,1))
    ax1.scatter(xs, ys, s=10, c=ys, linestyle='-', linewidth=1 )
    ax1.grid(b=True,axis='y',alpha=1)
    
    plt.pause(1)


def drive_y(car,x_grid,y_grid,j,i,j1,loop, sign):

    j=j*sign
    j1=j1*sign
    print(j)
    #print(j1)
    if car[1,i]+j1<length_of_road:
        
        if y_grid[int(car[1,i])+j] ==1 and x_grid[int(car[0,i])]==1 :
            #print("car in front ")
            car[2,i]=0
            loop=False
            return loop
        
        
        
        elif fabs(j1)>car[2,i] :
            #print("unobstructed drive")
            y_grid[int(car[1,i])]=0
            car[1,i]=car[1,i]+j    
                
            y_grid[int(car[1,i])]=1
            loop= False
            return loop
                                        
                                        
        elif y_grid[int(car[1,i])+j] !=1 and y_grid[int(car[1,i])+j1] !=1 and x_grid[int(car[0,i])]!=1 : 
            #print(" we can keep driving")
            loop=True
            return loop
                
        elif y_grid[int(car[1,i])+j] !=1 and y_grid[int(car[1,i])+j1] ==1 and x_grid[int(car[0,i])]==1:
            #print("Space occupied in front ")
            y_grid[int(car[1,i])]=0
            y_grid[int(car[1,i])+j]=1 
            car[2,i]=fabs(j)
            car[1,i]=car[1,i]+j
            loop=False
            return loop
def drive_x(car,x_grid,y_grid,j,i,j1,loop,sign):
    j=j*sign
    j1=j1*sign
    #print("SIGN IS " +str(sign))
    #print(j)
    #print(j1)
    if car[0,i]+j1<length_of_road:
        
        if x_grid[int(car[0,i])+j] ==1 and y_grid[int(car[1,i])]==1:
     #       print("car in front right ")
            car[2,i]=0
            loop=False
            return loop
        
        
        
        elif fabs(j1)>car[2,i] :
            #print("unobstructed drive right")
            x_grid[int(car[0,i])]=0
            car[0,i]=car[0,i]+j   
                
            x_grid[int(car[0,i])]=1
            loop=False
            return loop
                                        
                                        
        elif x_grid[int(car[0,i])+j] !=1 and x_grid[int(car[0,i])+j1] !=1 and y_grid[int(car[1,i])]!=1: 
            #print(" we can keep driving right")
            loop=True
            return loop
                
        elif x_grid[int(car[0,i])+j] !=1 and x_grid[int(car[0,i])+j1] ==1 and y_grid[int(car[1,i])]==1:
            #print("Space occupied in front right ")
            x_grid[int(car[0,i])]=0
            x_grid[int(car[0,i])+j]=1 
            car[2,i]=fabs(j)
            car[0,i]=car[0,i]+j
            loop=False
            return loop
        


def drive(car,x_grid,y_grid,j,i,j1,loop):
        if car[4,i]==0:#forward
            drive_y(car,x_grid,y_grid,j,i,j1,loop,1)
        elif car[4,i]==1:#backward
            drive_y(car,x_grid,y_grid,j,i,j1,loop,-1)
        elif car[4,i]==2:#left
            drive_x(car,x_grid,y_grid,j,i,j1,loop,-1)
        elif car[4,i]==3:#right
            drive_x(car,x_grid,y_grid,j,i,j1,loop,1)
        return loop
    
def central_crossroad(car,x_grid,y_grid,j,i,j1,stop_position_x,stop_position_y,block_road):
    car[2,i]=0#car needs to stop at traffic light
    print("WE ARE AT CENTRAL CROSS ROADS")
    random1=list(range(0,4))
    random1.remove(block_road)
    which_way=random.choice(random1)
    print(which_way)
    if which_way==0 and (y_grid[51]==1 and x_grid[0]==1): #driving forward

        print("FORWARD POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==0 and y_grid[51]!=1 :
        print("POSITIVE Y")
        car[3,i]=1
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=51
        car[0,i]=0
        y_grid[51]=1
        car[4,i]=0
    if which_way==2 and (y_grid[49]==1 and x_grid[-1]==1): #driving left
        print("LEFT POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==2  and x_grid[-1]!=1:
        print("NEGATIVE X")
        car[3,i]=4
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=49
        car[0,i]=-1
        y_grid[49]=1
        x_grid[-1]=1
        car[4,i]=2
    if which_way==3 and (y_grid[50]==1 and x_grid[2]==1): #driving right
        print("RIGHT POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==3  and x_grid[2]!=1:
        print("POSITIVE X")
        car[3,i]=4
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=50
        car[0,i]=2
        y_grid[50]=1
        x_grid[2]=1
        car[4,i]=3
    if which_way==1 and (y_grid[48]==1 and x_grid[1]==1): #driving down
        print("DOWN POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==1  and y_grid[48]!=1:
        print("NEGATIVE Y")
        car[3,i]=1
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=48
        car[0,i]=1
        y_grid[48]=1
        x_grid[1]=1
        car[4,i]=1
def upper_crossroads(car,x_grid,y_grid,j,i,j1,stop_position_x,stop_position_y,block_road):
    car[2,i]=0#car needs to stop at traffic light
    print("WE ARE AT UPPER CROSS ROADS")
    random1=list(range(1,4))
    random1.remove(block_road)
    which_way=random.choice(random1)
    print(which_way)
    if which_way==2 and (y_grid[98]==1 and x_grid[-1]==1): #driving left
        print("FRONT LEFT POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        x_grid[int(car[0,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==2 :
        print("NEGATIVE X")
        car[3,i]=3
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=98
        car[0,i]=-1
        y_grid[98]=1
        x_grid[-1]=1
        car[4,i]=2
    if which_way==3 and (y_grid[99]==1 and x_grid[2]==1): #driving left
        print("FRONT RIGHT POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        x_grid[int(car[0,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==3  :
        print("POSITIVE X")
        car[3,i]=3
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=99
        car[0,i]=2
        y_grid[99]=1
        x_grid[2]=1
        car[4,i]=3
    if which_way==1 and (y_grid[97]==1 and x_grid[1]==1):#driving down
        print("Top Bottom POSITION OCCUPIED")
        y_grid[int(car[1,i])]=0
        x_grid[int(car[0,i])]=0
        car[0,i]=stop_position_x
        car[1,i]=stop_position_y
        car[2,i]=0
        y_grid[int(car[1,i])]=1
        x_grid[int(car[0,i])]=1
    elif which_way==1  :
        print("Negative Y")
        car[3,i]=1
        y_grid[int(car[1,i])]=0 
        x_grid[int(car[0,i])]=0
        car[1,i]=97
        car[0,i]=1
        y_grid[97]=1
        x_grid[1]=1
        car[4,i]=1        
def new_velocity(car,x_grid,y_grid,lenth_of_road):
    for i in range(number_of_cars):
        
        if car[2,i]<Vmax:
            loop=True
            car[2,i]=car[2,i]+1
            j=1
            
            while loop==True and (j<int(car[2,i]+1) or j<int(car[2,i]+1)) :
                j1=j+1
                if (j+car[1,i]>=48 and car[4,i]==0 and car[1,i]<=48 and car[3,i]==1): #we are at the central cross road coming from downside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,0,47,1)
                elif (-j+car[1,i]<=51 and car[4,i]==1 and car[1,i]>=51 and car[3,i]==1): #we are at the central cross road coming from upside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,1,50,0)
                elif (j+car[0,i]>=-1 and car[4,i]==3 and car[0,i]<=-1 and car[3,i]==4): #we are at the central cross road coming from left side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,-2,50,2)
                elif (-j+car[0,i]<=2 and car[4,i]==2 and car[0,i]>=2 and car[3,i]==4): #we are at the central cross road coming from right side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,3,49,3)
                
     ##################################           
                
                elif (j+car[1,i]>=97 and car[4,i]==0 and car[1,i]<=97 and car[3,i]==1):#we are at the upper crossroads coming from downside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    upper_crossroads(car,x_grid,y_grid,j,i,j1,0,97,1)
                elif (-j+car[0,i]<=2 and car[4,i]==2 and car[0,i]>=2 and car[3,i]==3):#we are at the upper crossroads coming from right side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    upper_crossroads(car,x_grid,y_grid,j,i,j1,3,98,3)
                else:
                    drive(car,x_grid,y_grid,j,i,j1,loop) 
                    
                
                j=j+1
                 
            #future_space=(car[0,i]+car[1,i])
        elif car[2,i]==Vmax:   
            loop=True
            j=1
            while loop==True and (j<int(car[2,i]+1) or j<int(car[2,i]+1)):
                j1=j+1 #seeker
                if (j+car[1,i]>=48 and car[4,i]==0 and car[1,i]<=48 and car[3,i]==1): #we are at the central cross road coming from downside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,0,47,1)
                elif (-j+car[1,i]<=51 and car[4,i]==1 and car[1,i]>=51 and car[3,i]==1): #we are at the central cross road coming from upside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,1,50,0)
                elif (j+car[0,i]>=-1 and car[4,i]==3 and car[0,i]<=-1 and car[3,i]==4): #we are at the central cross road coming from left side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,-2,50,2)
                elif (-j+car[0,i]<=2 and car[4,i]==2 and car[0,i]>=2 and car[3,i]==4): #we are at the central cross road coming from right side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    central_crossroad(car,x_grid,y_grid,j,i,j1,3,49,3)   
                
     ##################################           
                
                elif (j+car[1,i]>=97 and car[4,i]==0 and car[1,i]<=97 and car[3,i]==1):#we are at the upper crossroads coming from downside
                    y_grid[int(car[1,i])]=0
                    print(car)
                    upper_crossroads(car,x_grid,y_grid,j,i,j1,0,97,1)
                elif (-j+car[0,i]<=2 and car[4,i]==2 and car[0,i]>=2 and car[3,i]==3):#we are at the upper crossroads coming from right side
                    x_grid[int(car[0,i])]=0
                    print(car)
                    upper_crossroads(car,x_grid,y_grid,j,i,j1,3,98,3)                
                else:
                    drive(car,x_grid,y_grid,j,i,j1,loop) 
                j=j+1
    return car, y_grid    
 

print(car1)
for h in range(50):
    
    z,z1=new_velocity(car1,x_grid1,y_grid1,length_of_road)      
    print(z)
    new_data=np.transpose(z)
    with open(r"C:\Users\User\Desktop\Traffic Pictures\fulldata2.txt", "w") as f:
        np.savetxt(f, data)
    animate(h)
